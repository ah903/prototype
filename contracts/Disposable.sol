//////////////////////////////////////////////////////////////////////////
// Contract Disposable
//////////////////////////////////////////////////////////////////////////
contract Disposable{

	/////////////////////////////////////////////////////////////////////
	// Address of the Contract Owner Used To Return Funds When the
	// The Contract Is Terminated
	/////////////////////////////////////////////////////////////////////
	address public contractOwner;

	/////////////////////////////////////////////////////////////////////
	// Address of the Contract Owner Used To Return Funds When the
	// The Contract Is Terminated
	/////////////////////////////////////////////////////////////////////
	modifier onlyContractOwner{
		if(msg.sender==contractOwner) _ else throw;
	}

	/////////////////////////////////////////////////////////////////////
	// Constructor Function
	/////////////////////////////////////////////////////////////////////
	// Restrictions
	// Executed Once On Contract Deployment
	/////////////////////////////////////////////////////////////////////
	function Disposable(){
		contractOwner = msg.sender;
	}

	/////////////////////////////////////////////////////////////////////
	// Transfers contract ownership to a new Owner
	/////////////////////////////////////////////////////////////////////
	// Restrictions
	// May Only Be Called By The Current Contract Owner
	/////////////////////////////////////////////////////////////////////
	function setOwner(address newContractOwner) onlyContractOwner{
		contractOwner = newContractOwner;
	}

	/////////////////////////////////////////////////////////////////////
	// Terminate the Contract
	// Removes the Contract from the blockchain although history 
	// Still persists
	/////////////////////////////////////////////////////////////////////
	// Restrictions
	// May Only Be Called By The Current Contract Owner
	/////////////////////////////////////////////////////////////////////
	function kill() onlyContractOwner{
		selfdestruct(contractOwner);
	}
}